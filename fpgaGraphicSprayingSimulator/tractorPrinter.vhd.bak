library IEEE;
use ieee.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tractorPrinter is
   port (column, row : in std_logic_vector(9 downto 0);
         clock : in std_logic;
         red, green, blue : out std_logic_vector(3 downto 0);
         x_pos, y_pos : in std_logic_vector(9 downto 0);
         direction : in std_logic_vector(1 downto 0);
         speed : in std_logic_vector(3 downto 0));
end entity tractorPrinter;

architecture tractorPrinter of tractorPrinter is
   constant tractor_width : integer := 40;
   constant tractor_height : integer := 40;
   signal address : std_logic_vector(16 downto 0);
   signal romImage_q : std_logic_vector(11 downto 0);
   signal move_counter : integer := 0;
   signal x_pos_internal, y_pos_internal : unsigned(9 downto 0) := (others => '0');
   signal speed_counter : unsigned(3 downto 0) := (others => '0');
   component romImage IS
   PORT
   (
      address      : IN STD_LOGIC_VECTOR (16 DOWNTO 0);
      clock      : IN STD_LOGIC  := '1';
      q      : OUT STD_LOGIC_VECTOR (11 DOWNTO 0)
   );
   END component;
begin
   romImage1: romImage PORT MAP (address, clock, romImage_q);

   process(clock)
   begin
      if (clock'event and clock = '1') then
         if move_counter = to_integer(unsigned(speed)) then
            move_counter <= 0;
            case direction is
               when "00" =>  -- Move right
                  if x_pos_internal < 600 then
                     x_pos_internal <= x_pos_internal + 40;
                  else
                     x_pos_internal <= 0;
                  end if;
               when "01" =>  -- Move down
                  if y_pos_internal < 440 then
                     y_pos_internal <= y_pos_internal + 40;
                  else
                     y_pos_internal <= 0;
                  end if;
               when "10" =>  -- Move left
                  if x_pos_internal > 0 then
                     x_pos_internal <= x_pos_internal - 40;
                  else
                     x_pos_internal <= 600;
                  end if;
               when "11" =>  -- Move up
                  if y_pos_internal > 0 then
                     y_pos_internal <= y_pos_internal - 40;
                  else
                     y_pos_internal <= 440;
                  end if;
               when others =>
                  null;
            end case;
         else
            move_counter <= move_counter + 1;
         end if;
         
         if (unsigned(column) >= x_pos_internal and unsigned(column) < x_pos_internal + tractor_width and
             unsigned(row) >= y_pos_internal and unsigned(row) < y_pos_internal + tractor_height) then
            address <= std_logic_vector(to_unsigned((to_integer(unsigned(row)) - to_integer(y_pos_internal)) * tractor_width + 
                                                    (to_integer(unsigned(column)) - to_integer(x_pos_internal)), 17));
         else
            address <= (others => '0');  -- Background color or default value
         end if;
      end if;
   end process;

   red   <= romImage_q(11 downto 8);
   green <= romImage_q(7 downto 4);
   blue  <= romImage_q(3 downto 0);
end architecture tractorPrinter;
